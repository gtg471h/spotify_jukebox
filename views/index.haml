.pure-g
  .pure-u-1-2
    %ul.users.entity-list
      - locals[:users].each do |user|
        %li.user{:id => user.id, :class => if user.enabled? then 'enabled' end}
          .name= user.name
          %ul.playlists.entity-list{ :class => if user.enabled? then 'enabled' else 'disabled' end }
            - locals[:playlists][user.id].each do |playlist|
              %li.playlist{ :id => playlist.id, :class => if playlist.enabled? then 'active' end }
                %label.name.transformed.transform-extrude
                  %span.content= playlist.name
                  %span.right.side
                  %span.bottom.side

    %button.add-playlist.transformed.transform-extrude#add_playlist_button
      %span.content + Playlist
      %span.right.side
      %span.bottom.side

  .pure-u-1-2
    .now-playing#track-data
      .album-artist#artist
      .album-title#title
      .album-art#art
        .album-art-overlay#overlay
          #play-toggle.album-art-overlay-play-toggle.fa{ :class => if playing then 'fa-pause' else 'fa-play-circle-o' end }
      .playlist-user#user-data
        .user-avatar#avatar
        .user-name#name


%form#dialog_form{:action => 'add_playlist', :method => 'POST'}
  %fieldset
    %label{:for => 'playlist_url'} Enter a Spotify playlist URL.
    %input#playlist_url{:required => 'required', :type => 'url', :name => 'playlist_url'}

#dialog_confirm
  %span Are you sure you want to remove this playlist?

:javascript
  $(document).ready(function(){
    currentTrackWebSocket().initialize();

    var ajaxPost = function(url, params) {
      $.ajax({
        url: url + params,
        type: 'POST'
      });
    };

    var showPlaylists = function($playlists) {
      $playlists.show().removeClass('disabled').addClass('enabled');
    };

    var hidePlaylists = function($playlists) {
      $playlists.hide().removeClass('enabled').addClass('disabled');
    };

    $('li.user div.name').on('click', function(e) {
      e.preventDefault();
      var isEnabled = $(this).parent('li.user').hasClass('enabled');
      var userPlaylists = $(this).siblings('ul.playlists');
      var params = $(this).parent('li.user').attr('id');

      if (isEnabled === true) {
        ajaxPost('disable_user/', params);
        hidePlaylists(userPlaylists);
      } else {
        ajaxPost('enable_user/', params);
        showPlaylists(userPlaylists);
      }
    });

    $('li.playlist').on('click', function(e) {
      e.preventDefault();
      var isEnabled = $(this).hasClass('active');
      var actionUrl = isEnabled? 'disable_playlist/' : 'enable_playlist/';

      ajaxPost(actionUrl, $(this).attr('id'));
    });

    $('#dialog_form').dialog({
      autoOpen:  false,
      height:    150,
      width:     350,
      resizable: false,
      modal:     false,
      buttons: {
        ok: function() {
          this.submit();
        },
        cancel: function() {
          $(this).dialog('close');
        }
      }
    });

    $('#dialog_confirm').dialog({
      autoOpen:  false,
      resizable: false,
      height:    200,
      modal:     false,
      draggable: false,
      buttons: {
        YOLO: function() {
          $(this).dialog('close');
        },
        'Abort!': function() {
          $(this).dialog('close');
        }
      }
    });

    $('#add_playlist_button').on('click', function() { $('#dialog_form').dialog('open'); });
  });
